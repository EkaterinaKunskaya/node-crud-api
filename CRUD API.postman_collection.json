{
	"info": {
		"_postman_id": "609a5eff-c90a-4da2-926c-c756d6588349",
		"name": "CRUD API",
		"description": "# üë§ Get started here\n\nThis template demonstrates how to structure endpoints for a user management REST API that contains endpoints for user registration, login, profile management, and more.\n\nUsers created using this API can perform tasks like registering, logging in, and updating their profiles. Users who are assigned an 'admin' role can perform all tasks, including getting a list of all users and deleting user profiles.\n\n### üîê Authentication and authorization\n\nYou must have a valid bearer token to use the API added in this template. When you send the `Register` request, you will receive a token in the response. The `Register` request also contains a test script that sets the token in the `accessToken` collection variable so you can reuse it in other requests easily.\n\nTo send the requests in the `Admin` folder, you need to have admin permissions. You can grant yourself admin permissions using the `Register` request by adding a key named \"role\" with \"admin\" as the value in the request body.\n\n## üîñ How to use this template?\n\n#### **Step 1: Send the requests**\n\nCheck out the different parts of the requests, including the request body, documentation, headers, tests, and path parameters. Send the requests to view the response returned by the API.\n\nYou can explore the API in the order given below to understand the workflow without running into any hiccups:\n\n`Register ‚Üí Log in ‚Üí Get profile ‚Üí Update profile ‚Üí Change user role ‚Üí Get all users ‚Üí Delete user`\n\n#### **Step 2: Customize the requests**\n\nAdd your API‚Äôs base URL in the `url` collection variable. Update the request body wherever needed and send the requests to test your API.\n\n#### **Step 3: Continue building the collection**\n\nCreate requests in this collection to test the new API endpoints you develop.\n\n## üí°Related templates\n\n[Authorization methods](https://go.pstmn.io/Authorization-methods)  \n[Payment gateway and processing API](https://go.pstmn.io/payment-gateway-and-processing-API)  \n[File storage API](https://go.pstmn.io/file-storage-API)  \n[Push notification API](https://go.pstmn.io/push-notification-API)  \n[Search API](https://go.pstmn.io/search-API)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32899204"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "GET ALL USERS",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET USER BY ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/users/7e449bcc-e139-4008-8e6a-e3f873c44dbe",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"7e449bcc-e139-4008-8e6a-e3f873c44dbe"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE NEW USER",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"New\",\n    \"age\": 25,\n    \"hobbies\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Update name\",\n    \"hobbies\": [\"new hobby\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/users/58da9d8b-9fa8-46de-ad22-0a51c55d1b44",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"58da9d8b-9fa8-46de-ad22-0a51c55d1b44"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/users/58da9d8b-9fa8-46de-ad22-0a51c55d1b44",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"58da9d8b-9fa8-46de-ad22-0a51c55d1b44"
							]
						}
					},
					"response": []
				},
				{
					"name": "NON EXISTING RESOURCE",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/some-non/existing/resource",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"some-non",
								"existing",
								"resource"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://e-commerce-store.glitch.me",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		}
	]
}